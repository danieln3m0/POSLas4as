version: '3.8'

services:
  # Base de datos MySQL
  mysql:
    image: mysql:8.0
    container_name: pos-mysql
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: pos_backend
      MYSQL_USER: posuser
      MYSQL_PASSWORD: pospass
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - pos-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Aplicaci√≥n Spring Boot
  pos-backend:
    build: .
    container_name: pos-backend
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/pos_backend?useSSL=false&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: posuser
      SPRING_DATASOURCE_PASSWORD: pospass
      SPRING_PROFILES_ACTIVE: docker
      JWT_SECRET: miClaveSecretaSuperSeguraParaElSistemaPOS2024
      JWT_EXPIRATION: 86400000
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - pos-network
    restart: unless-stopped

  # Redis para cache (opcional)
  redis:
    image: redis:7-alpine
    container_name: pos-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - pos-network
    restart: unless-stopped

  # Nginx como reverse proxy (opcional)
  nginx:
    image: nginx:alpine
    container_name: pos-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - pos-backend
    networks:
      - pos-network
    restart: unless-stopped

volumes:
  mysql_data:
  redis_data:

networks:
  pos-network:
    driver: bridge 